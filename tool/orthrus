#!/usr/bin/env python2

from argparse import ArgumentParser
import ConfigParser
import os
import sys

from orthrus.commands import *

DESCRIPTION = """A tool for extended analysis of fuzzed applications."""
CREATE_HELP = """Create an orthrus workspace"""
ADD_HELP = """Add a fuzzing job"""
REMOVE_HELP = """Remove a fuzzing job"""
START_HELP = """Start the fuzzing jobs"""
STOP_HELP = """Stop the fuzzing jobs"""
SHOW_HELP = """Show whats currently going on"""
TRIAGE_HELP = """Triage crash samples"""
DATABASE_HELP = """Joern database operations"""
CLEAN_HELP = """Clean up the workspace"""
DESTROY_HELP = """Destroy the orthrus workspace"""

class OrthrusTool():
    def __init__(self, description):
        self._description = description
        self._args = self._parse_cmdline(description)
        self._config = self._parse_config()
    
    def _parse_cmdline(self, description):
        argParser = ArgumentParser(description)
        
        argParser.add_argument('-v', '--verbose',
                            action = 'store_true',
                            help = """Verbose mode, print information about the progress""",
                            default = False)
        
        subparsers = argParser.add_subparsers(description="Orthrus subcommands")
        
        # Command 'create'
        create_parser = subparsers.add_parser('create', help=CREATE_HELP)
        create_parser.add_argument('-a', '--afl-asan',
                                   action = 'store_true',
                                   help = """Setup binaries for afl with AddressSanitizer""",
                                   default = False)
        create_parser.add_argument('-b', '--afl-harden',
                                   action = 'store_true',
                                   help = """Setup binaries for afl in 'harden' mode (stack-protector, fortify)""",
                                   default = False)
        create_parser.add_argument('-c', '--coverage',
                                   action = 'store_true',
                                   help = """Setup binaries to collect coverage information""",
                                   default = False)
        create_parser.add_argument('-d', '--configure-flags', nargs='?', 
                                type = str, default="",
                                help = 'Additional flags for configuring the source')
        create_parser.add_argument('-f', '--cflags', nargs='?', 
                                type = str, default="",
                                help = 'Additional flags to go into CFLAGS for compilation')
        create_parser.add_argument('-l', '--ldflags', nargs='?', 
                                type = str, default="",
                                help = 'Additional flags to go into LDFLAGS for compilation')
        create_parser.set_defaults(func=self._create)
        
        # Command 'add'
        add_parser = subparsers.add_parser('add', help=ADD_HELP)
        add_parser.add_argument('-n', '--job', nargs='?', 
                                type = str, default="",
                                help = 'Add a job with executable command line invocation string')
        add_parser.add_argument('-j', '--job-id', nargs='?', 
                                type = str, default="",
                                help = 'Job Id for the job which should be selected')
        add_parser.add_argument('-i', '--import', dest='_import', nargs='?', 
                                type = str, default="",
                                help = 'Import an AFL fuzzing output directory provided as tar.gz')
        add_parser.add_argument('-s', '--sample', nargs='?', 
                                type = str, default="",
                                help = 'A single file or directory of afl testcases for fuzzing')
        add_parser.set_defaults(func=self._add)
        
        # Command 'remove'
        remove_parser = subparsers.add_parser('remove', help=REMOVE_HELP)
        remove_parser.add_argument('-j', '--job-id', nargs='?', 
                                type = str, default="",
                                help = 'Job Id for the job which should be removed')
        remove_parser.set_defaults(func=self._remove)
        
        # Command 'start'
        start_parser = subparsers.add_parser('start', help=START_HELP)
        start_parser.add_argument('-j', '--job-id', nargs='?', 
                                type = str, default="",
                                help = 'Job Id for the job which should be started')
        start_parser.add_argument('-m', '--minimize',
                           action = 'store_true',
                           help = """Minimize corpus before start""",
                           default = False)
        start_parser.set_defaults(func=self._start)
        
        # Command 'stop'
        stop_parser = subparsers.add_parser('stop', help=STOP_HELP)
        stop_parser.add_argument('-m', '--minimize',
                           action = 'store_true',
                           help = """Minimize corpus on stop""",
                           default = False)
        stop_parser.set_defaults(func=self._stop)
        
        # Command 'show'
        show_parser = subparsers.add_parser('show', help=SHOW_HELP)
        show_parser.add_argument('-j', '--jobs',
                           action = 'store_true',
                           help = """Show configured jobs""",
                           default = False)
        show_parser.set_defaults(func=self._show)
        
        # Command 'triage'
        triage_parser = subparsers.add_parser('triage', help=TRIAGE_HELP)
        triage_parser.add_argument('-j', '--job-id', nargs='?', 
                                   type = str, default="",
                                   help = """Job Id for the job which should be triaged""")
        triage_parser.set_defaults(func=self._triage)
        
        # Command 'database'
        database_parser = subparsers.add_parser('database', help=DATABASE_HELP)
        database_parser.add_argument('-s', '--startup',
                               action = 'store_true',
                               help = """Start joern neo4j instance for codebase""",
                               default = False)
        database_parser.add_argument('-x', '--shutdown',
                               action = 'store_true',
                               help = """Shutdown joern neo4j instance""",
                               default = False)
        database_parser.add_argument('-a', '--all',
                                 action = 'store_true',
                                 help = """All configured jobs""",
                                 default = False)
        database_parser.add_argument('-j', '--job-id', nargs='?', 
                                   type = str, default="",
                                   help = """Job Id for the job""")
        database_parser.add_argument('-l', '--load-crashes',
                                 action = 'store_true',
                                 help = """Upload crashes to the database""",
                                 default = False)
        database_parser.add_argument('-u', '--unload-crashes',
                                 action = 'store_true',
                                 help = """Remove crashes from database""",
                                 default = False)
        database_parser.add_argument('-c', '--load-coverage',
                                 action = 'store_true',
                                 help = """Upload coverage information""",
                                 default = False)
        database_parser.set_defaults(func=self._database)
        
        # Command 'clean'
        clean_parser = subparsers.add_parser('clean', help=CLEAN_HELP)
        #create_parser.add_argument('-x', type=int, default=1)
        clean_parser.set_defaults(func=self._clean)
        
        # Command 'destroy'
        destroy_parser = subparsers.add_parser('destroy', help=DESTROY_HELP)
        #create_parser.add_argument('-x', type=int, default=1)
        destroy_parser.set_defaults(func=self._destroy)
        
        return argParser.parse_args()
    
    def _parse_config(self, configfile = None):
        config = {}
        if not configfile:
            configfile = os.path.expanduser('~/.orthrus/orthrus.conf')
            
        configparser = ConfigParser.ConfigParser()
        configparser.read(configfile)
        
        config['orthrus'] = {}
        config['orthrus']['directory'] = configparser.get("orthrus", "directory")
        
        config['joern'] = {}
        config['joern']['joern_path'] = os.path.abspath(os.path.expanduser((configparser.get("joern", "joern_path"))))

        config['neo4j'] = {}
        config['neo4j']['neo4j_path'] = os.path.abspath(os.path.expanduser((configparser.get("neo4j", "neo4j_path"))))
        
        config['afl'] = {}
        config['afl']['afl_path'] = os.path.abspath(os.path.expanduser((configparser.get("afl", "afl_path"))))
        
        config['afl-utils'] = {}
        config['afl-utils']['afl_utils_path'] = os.path.abspath(os.path.expanduser((configparser.get("afl-utils", "afl_utils_path"))))
        
        config['afl-cov'] = {}
        config['afl-cov']['afl_cov_path'] = os.path.abspath(os.path.expanduser((configparser.get("afl-cov", "afl_cov_path"))))
        
        return config
        
    def _create(self, args):
        cmd = OrthrusCreate(args, self._config)
        cmd.run()
        
    def _add(self, args):
        cmd = OrthrusAdd(args, self._config)
        cmd.run()
    
    def _remove(self, args):
        cmd = OrthrusRemove(args, self._config)
        cmd.run()
        
    def _start(self, args):
        cmd = OrthrusStart(args, self._config)
        cmd.run()
    
    def _stop(self, args):
        cmd = OrthrusStop(args, self._config)
        cmd.run()
        
    def _show(self, args):
        cmd = OrthrusShow(args, self._config)
        cmd.run()
        
    def _triage(self, args):
        cmd = OrthrusTriage(args, self._config)
        cmd.run()
        
    def _database(self, args):
        cmd = OrthrusDatabase(args, self._config)
        cmd.run()
        
    def _clean(self, args):
        print "Clean command"
        
    def _destroy(self, args):
        cmd = OrthrusDestroy(args, self._config)
        cmd.run()
        
    def run(self):
        sys.stdout.write(self._description + "\n\n")
        
        self._args.func(self._args)
        
if __name__ == '__main__':
    tool = OrthrusTool(DESCRIPTION)
    tool.run()